@using Microsoft.EntityFrameworkCore
@using MySqlConnector
@using OAT.Controllers.MNews.Readers
@using OAT.Controllers.Security
@using OAT.Entities.Database
@using OAT.Entities.Interfaces
@using OAT.Utilities
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime;

<form class="panel-form">
	<label for="news" class="panel-form-title">
		Новости
	</label>

	<div class="input-box">
		<label for="type">
			Тип
		</label>
		<select id="type" @onchange="(r) => {
			form.type = r.Value?.ToString()!;
			OnChangeNews(r.Value?.ToString()!);
	}">
			<option value="main">
				Новости сайта
			</option>
			<option value="professionalitet">
				Новости профессионалитета
			</option>
			<option value="demoExam">
				Новости демонстрационного экзамена
			</option>
		</select>
	</div>

	<div class="input-box">
		<label for="news-title">
			Название
		</label>
		<input @bind-value="form.name" id="news-title" type="text">
	</div>

	<div class="input-box">
		<label for="news-date">
			Дата
		</label>
		<input @bind-value="form.date" id="news-date" type="date">
	</div>
    <div class="input-box">
        <label for="news-date">
            Зафиксировать новость
        </label>
        <input @bind="form.IsFixed" @bind:event="oninput" id="news-date" type="checkbox">
    </div>
	<div class="input-box">
		<label for="news-text">
			Текст
		</label>
        <textarea @bind="form.description" @bind:event="oninput" class="customized" id="news-text">Текст новости, её содержание.</textarea>
	</div>

	<div class="input-box">
		<label for="images">
			Фото
		</label>
		<InputFile id="images" multiple OnChange='(f) =>{
			form.photos.Clear();
			foreach(var file in f.GetMultipleFiles())
				form.photos.Add(file);
		}'/>
	</div>
    @button
</form>

<table class="customized panel-table">
	<thead>
		<tr>
			<th>
				ID
			</th>
			<th>
				Имя
			</th>
			<th>
				Дата
			</th>
			<th>
				Управление
			</th>
		</tr>
	</thead>

	<tbody>
		@newsList
	</tbody>
</table>
@code {

    protected override void OnInitialized()
    {
        OnChangeNews("main");
        SetAddButton();
    }
    private RenderFragment newsList { get; set; } = (__builder) => { };
    private RenderFragment button { get; set; } = (__builder) => { };
	private SubmitForm form { get; set; } = new SubmitForm();

	private void OnChangeNews(string name)
	{

		var _news = name switch
		{
			"demoExam" => new List<INews>(DemoExamsNewsReader.news.Cast<INews>()),
			"professionalitet" => new List<INews>(ProfNewsReader.news.Cast<INews>()),
			_ => new List<INews>(NewsReader.news.Cast<INews>()),

		};

		newsList = (__builder) =>
		{
			foreach (var news in _news)
			{
				<tr>
					<td>
						@news.id
					</td>

					<td>
						@news.title
					</td>
					<td>
						@news.date
					</td>
					<td>
                        <button class="panel-table-button" @onclick='async () => {
							await GetNews(name, news);
						}'>
                            изменить
                        </button>
						<button class="panel-table-button" @onclick='async () => {
							await DeleteNews(name, news);
							OnChangeNews(name);
						}'>
							удалить
						</button>
					</td>
                </tr>
            }
        };

    }

    private async Task DeleteNews(string name, INews news)
    {
        if (httpContextAccessor.HttpContext is null)
        {
            Logger.Error("httpContextAccessor.HttpContext is null");
            return;
        }

        var permission = name switch
        {
            "demoExam" => Enums.Role.www_reporter_demoexams,
            "professionalitet" => Enums.Role.www_reporter_prof_news,
            _ => Enums.Role.www_reporter_news,
        };

        var roles = Permissions.GetUserRoles(httpContextAccessor.HttpContext.User.GetUsername());
        if(roles.IndexOf(permission) < 0 && roles.IndexOf(Enums.Role.www_admin) < 0)
        {
            await Log("❌ Вам отказано в доступе. ");
            return;
        }

        using var connection = new DatabaseContext();

        if(name is "demoExam")
        {
            connection.DemoExamNews.RemoveRange(connection.DemoExamNews.Where(e => e.id == news.id));
            await connection.SaveChangesAsync();
            await DemoExamsNewsReader.init();
        }
        else if (name is "professionalitet")
        {
            connection.ProfNews.RemoveRange(connection.ProfNews.Where(e => e.id == news.id));
            await connection.SaveChangesAsync();
            await ProfNewsReader.init();

        }else
        {
            connection.News.RemoveRange(connection.News.Where(e => e.id == news.id));
            await connection.SaveChangesAsync();
            await NewsReader.init();
        }
        Logger.Info($"Пользователь удалил новость.\n" +
            $"ID: {news.id}\n" +
            $"Пользователь: {httpContextAccessor.HttpContext.User.GetUsername()}\n" +
            $"IP-адрес: {httpContextAccessor.HttpContext.UserIP()}");
        await Log("✅ Новость удалена");

    }

    private async Task OnPublish()
    {
        try
        {
            if (httpContextAccessor.HttpContext is null)
            {
                Logger.Error("httpContextAccessor.HttpContext is null");
                return;
            }

            var permission = form.type switch
            {
                "demoExam" => Enums.Role.www_reporter_demoexams,
                "professionalitet" => Enums.Role.www_reporter_prof_news,
                _ => Enums.Role.www_reporter_news,
            };

            var roles = Permissions.GetUserRoles(httpContextAccessor.HttpContext.User.GetUsername());
            if (roles.IndexOf(permission) < 0 && roles.IndexOf(Enums.Role.www_admin) < 0)
            {
                await Log("❌ Вам отказано в доступе. ");
                Logger.Info($"Пользователю {httpContextAccessor.HttpContext.User.GetUsername()} отказано в доступе, т.к. право {permission} отсутствует");
                return;
            }

            var photos = new List<string>();
            foreach (var file in form.photos)
            {
                var path = $"images/news/{StringUtils.SHA226($"{file.Name}-{file.Size}")}{Path.GetExtension(file.Name)}";
                await using FileStream fs = new(Path.Combine("wwwroot", path), FileMode.Create);
                await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).CopyToAsync(fs);
                photos.Add(path);
            }

            using var connection = new DatabaseContext();
            if (form.type is "demoExam")
            {
                var news = new DemoExamNews(form.date.ToString("yyyy-MM-dd"),
                    form.name, form.description, form.description.GetWords(15), photos, form.IsFixed);
                await connection.AddAsync(news);
                await connection.SaveChangesAsync();
                await DemoExamsNewsReader.init();
            }
            else if (form.type is "professionalitet")
            {
                var news = new ProfNews(form.date.ToString("yyyy-MM-dd"),
                    form.name, form.description, form.description.GetWords(15), photos, form.IsFixed);
                await connection.AddAsync(news);
                await connection.SaveChangesAsync();
                await ProfNewsReader.init();
            }
            else
            {
                var news = new News(form.date.ToString("yyyy-MM-dd"),
                     form.name, form.description, form.description.GetWords(15), photos, form.IsFixed);
                await connection.AddAsync(news);
                await connection.SaveChangesAsync();
                await NewsReader.init();
            }


            Logger.Info($"Пользователь {httpContextAccessor.HttpContext.User.GetUsername()} опубликовал новую новость. \nТекст Новости: {form.name}. Тип: {form.type}.\nIP-адрес: {httpContextAccessor.HttpContext.UserIP()}");
            OnChangeNews(form.type);
            await Log("✅ Новость добавлена");
            form = new();
        }
        catch(Exception ex)
        {
            Logger.Error(ex);
            await Log("❌ Произошла ошибка. Сообщите");
        }
    }

    private async Task GetNews(string name, INews news)
    {
        if (httpContextAccessor.HttpContext is null)
        {
            Logger.Error("httpContextAccessor.HttpContext is null");
            return;
        }

        var permission = name switch
        {
            "demoExam" => Enums.Role.www_reporter_demoexams,
            "professionalitet" => Enums.Role.www_reporter_prof_news,
            _ => Enums.Role.www_reporter_news,
        };

        var roles = Permissions.GetUserRoles(httpContextAccessor.HttpContext.User.GetUsername());
        if (roles.IndexOf(permission) < 0 && roles.IndexOf(Enums.Role.www_admin) < 0)
        {
            await Log("❌ Вам отказано в доступе. ");
            return;
        }

        form.date = DateTime.ParseExact(news.date, "yyyy-MM-dd", null);
        form.description = news.description;
        form.IsFixed = news.IsFixed;
        form.name = news.title;
        form.photos = new();
        SetUpdateButton(news);
        await Log("⚠️ Включен режим редактирование новости");

    }

    private async Task UpdateNews(INews Inews)
    {
        if (httpContextAccessor.HttpContext is null)
        {
            Logger.Error("httpContextAccessor.HttpContext is null");
            return;
        }


        var permission = form.type switch
        {
            "demoExam" => Enums.Role.www_reporter_demoexams,
            "professionalitet" => Enums.Role.www_reporter_prof_news,
            _ => Enums.Role.www_reporter_news,
        };

        var roles = Permissions.GetUserRoles(httpContextAccessor.HttpContext.User.GetUsername());
        if (roles.IndexOf(permission) < 0 && roles.IndexOf(Enums.Role.www_admin) < 0)
        {
            await Log("❌ Вам отказано в доступе. ");
            Logger.Info($"Пользователю {httpContextAccessor.HttpContext.User.GetUsername()} отказано в доступе, т.к. право {permission} отсутствует");
            return;
        }

        var photos = new List<string>();
        if(form.photos.Count is not 0)
            foreach (var file in form.photos)
            {
                var path = $"images/news/{StringUtils.SHA226($"{file.Name}-{file.Size}")}{Path.GetExtension(file.Name)}";
                await using FileStream fs = new(Path.Combine("wwwroot", path), FileMode.Create);
                await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).CopyToAsync(fs);
                photos.Add(path);
            }

        using var connection = new DatabaseContext();
        if (form.type is "demoExam")
        {
            var news = await connection.DemoExamNews.FirstAsync(e => e.id == Inews.id);
            news.IsFixed = form.IsFixed;
            news.title = form.name;
            news.date = form.date.ToString("yyyy-MM-dd");
            news.description = form.description;
            news.short_description = form.description.GetWords(15);
            if(photos.Count is not 0)
                news.photos = photos.toJson();
            connection.Update(news);
            await connection.SaveChangesAsync();
            await DemoExamsNewsReader.init();
        }
        else if (form.type is "professionalitet")
        {
            var news = await connection.ProfNews.FirstAsync(e => e.id == Inews.id);
            news.IsFixed = form.IsFixed;
            news.title = form.name;
            news.date = form.date.ToString("yyyy-MM-dd");
            news.description = form.description;
            news.short_description = form.description.GetWords(15);
            if (photos.Count is not 0)
                news.photos = photos.toJson();
            connection.Update(news);
            await connection.SaveChangesAsync();
            await ProfNewsReader.init();
        }
        else
        {
            var news = await connection.News.FirstAsync(e => e.id == Inews.id);
            news.IsFixed = form.IsFixed;
            news.title = form.name;
            news.date = form.date.ToString("yyyy-MM-dd");
            news.description = form.description;
            news.short_description = form.description.GetWords(15);
            if (photos.Count is not 0)
                news.photos = photos.toJson();
            connection.Update(news);
            await connection.SaveChangesAsync();
            await NewsReader.init();
        }


        Logger.Info($"Пользователь {httpContextAccessor.HttpContext.User.GetUsername()} опубликовал новую новость. \nТекст Новости: {form.name}. Тип: {form.type}.\nIP-адрес: {httpContextAccessor.HttpContext.UserIP()}");
        OnChangeNews(form.type);
        await Log("✅ Новость обновил");
        SetAddButton();
        form = new();
    }

    private void SetAddButton()
    {
        button = (__builder) =>
        {
            <button type="button" class="panel-form-send" value="Отправить" @onclick="async () => await OnPublish()" multiple>
                Отправить
            </button>
        };
    }

    private void SetUpdateButton(INews news)
    {
        button = (__builder) =>
        {
            <p>⚠️ Частичное изменение фотографий недоступно. Вы можете только обновить все фотографии сразу. Если вы хотите оставить текущие фотографии, то просто не выбирайте другие и они сохраняться автоматически.</p>
            <button type="button" class="panel-form-send" value="Отправить" @onclick="async () => await UpdateNews(news)" multiple>
                Обновить новость
            </button>
        };
    }


    private async Task Log(string message)
    {
		await JSRuntime.InvokeVoidAsync("MessageController", "logger", message);
	}

	public class SubmitForm
	{
		public string type { get; set; } = "main";
		public string name { get; set; } = "Тест новость";
		public string description { get; set; } = "Текст новости, её содержание.";
		public DateTime date { get; set; } = DateTime.Now;
		public bool IsFixed { get; set; } = false;
		public List<IBrowserFile> photos { get; set; } = [];
	}
}
