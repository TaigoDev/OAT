@using OAT.Readers;
@using OAT.Utilities;
@using Microsoft.AspNetCore.Components.Rendering;
@using static Enums;

@foreach (var change in rows)
{
	<tr>
		<td>
			@change.cours
		</td>
		<td>
			@change.group
		</td>
		<td>
			@change.was_couple
		</td>
		<td>
			@change.was_cabinet
		</td>
		<td>
			@change.was_discipline
		</td>
		<td>
			@change.was_teacher
		</td>
		<td>
			@change.reason
		</td>
		<td>
			@change.couple
		</td>
		<td>
			@change.cabinet
		</td>
		<td>
			@change.discipline
		</td>
		<td>
			@change.teacher
		</td>
	</tr>
}
		 
		

@code {


	[Parameter]
	public string? search { get; set; }

	[Parameter]
	public Building corpus { get; set; }

	[Parameter]
	public string sheet { get; set; }

	public List<ChangeRow> rows = new List<ChangeRow>();

	protected override void OnInitialized()
	{
		var all_changes = ChangesController.GetListChanges((int)corpus!);
		var changes = all_changes.FirstOrDefault(e => e.SheetName == sheet) ?? all_changes.Last();
		if (search is null)
			rows = changes.rows.ToList();
		else
			rows = changes.rows.Where(e =>
				ToSearch(e.group ?? "").Contains(ToSearch(search)) ||
				ToSearch(e.teacher ?? "").Contains(ToSearch(search)) ||
				ToSearch(e.was_teacher ?? "").Contains(ToSearch(search))).ToList();

		string ToSearch(string? s)
		{
			if (s is null)
				return "";
			return s.ToLower().Replace(" ", "");
		}
	}
}
