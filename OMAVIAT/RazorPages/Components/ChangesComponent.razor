@using Microsoft.EntityFrameworkCore
@using OMAVIAT

@using OMAVIAT.Entities.Database
@using OMAVIAT.Entities.Enums
@using OMAVIAT.Entities.Schedule
@using OMAVIAT.Entities.Schedule.Database
@using OMAVIAT.Schedule.Entities.Enums
@using OMAVIAT.Utilities
@using OMAVIAT.Services.ReCaptchaV3


@inject IJSRuntime JSRuntime;
@inject ICaptchaV3Validator captcha;
@inject IHttpContextAccessor httpContextAccessor;
@renderFragment



@code {

    private DotNetObjectReference<ChangesComponent>? objRef;

    [Parameter]
    public string? search { get; set; }

    [Parameter]
    public Corpus corpus { get; set; }

    [Parameter]
    public DateOnly date { get; set; }

    public static List<ChangesTable> rows = new();
    private RenderFragment renderFragment = (__builder) =>
    {
        <h3 class="section-title title-centered" style="font-size: 1.4rem;">
            Пожалуйста, подождите. Идет проверка вашего устройства
        </h3>
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("GreetingHelpers.setDotNetHelper",
                    objRef);

            using var db = new DatabaseContext();
            var changes = await db.changes.Where(e => e.corpus == corpus && e.date == date).ToListAsync();
            if (search is not null)
                rows = changes.Where(e =>
                    ToSearch(e.group ?? "").Contains(ToSearch(search)) ||
                    ToSearch(e.teacher ?? "").Contains(ToSearch(search)) ||
                    ToSearch(e.was_teacher ?? "").Contains(ToSearch(search))).ToList();

            string ToSearch(string? s)
            {
                if (s is null)
                    return "";
                return s.ToLower().Replace(" ", "");
            }

            if (httpContextAccessor.HttpContext is not null && string.IsNullOrWhiteSpace(httpContextAccessor.HttpContext.Request.Headers["CF-Connecting-IP"]))
            {
                OnRowDisplay();
                this.StateHasChanged();
                return;
            }

            var token = await JSRuntime.InvokeAsync<string>("recaptchaCall");
            if (!await captcha.IsCaptchaPassedAsync(token))
            {
                await JSRuntime.InvokeVoidAsync("GreetingHelpers.setDotNetHelper", objRef);

                renderFragment = (__builder) =>
                 {
                     <h3 class="section-title title-centered" style="font-size: 1.4rem;">
                         Пройдите проверку на робота.
                     </h3>
                     <div id="html_element" data-callback="OnComplete" class="g-recaptcha recaptcha-block" data-sitekey="@Configurator.ReCaptchaV2.WebSecretKey"></div>
                 };
                this.StateHasChanged();
                await JSRuntime.InvokeVoidAsync("loadScript", "https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit");

                return;
            }
            OnRowDisplay();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            renderFragment = (__builder) =>
            {
                <h3 class="section-title title-centered" style="font-size: 1.4rem;">
                    Произошла техническая ошибка! Сообщите разработчикам сайта через службу информатизации
                </h3>
            };

        }
    }




    [JSInvokable]
    public async Task OnComplete(string token)
    {
        if (await CaptchaVerificationService.IsCaptchaValid(token))
        {
            OnRowDisplay();
            this.StateHasChanged();
            return;
        }

        renderFragment = (__builder) =>
        {
            <h3 class="section-title title-centered" style="font-size: 1.4rem;">
                Произошла техническая ошибка. Попробуйте позже.
            </h3>
        };
        this.StateHasChanged();
    }

    private void OnRowDisplay()
    {
        renderFragment = (__builder) =>
        {
            <table class="customized timetable">
                <thead>
                    <tr>
                        <th>
                            Курс
                        </th>
                        <th>
                            Группа
                        </th>
                        <th>
                            Пара
                        </th>
                        <th>
                            Аудит
                        </th>
                        <th>
                            Учеб.дисциплина
                        </th>
                        <th>
                            ФИО преподавателя
                        </th>
                        <th>
                            причина
                        </th>
                        <th>
                            пара
                        </th>
                        <th>
                            Аудит
                        </th>
                        <th>
                            Учеб.дисциплина
                        </th>
                        <th>
                            ФИО преподавателя
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var change in rows)
                    {

                        <tr>
                            <td>
                                @change.group.FirstDigit()
                            </td>
                            <td>
                                @change.group
                            </td>
                            <td>
                                @change.was_couple
                            </td>
                            <td>
                                @change.was_cabinet
                            </td>
                            <td>
                                @change.was_discipline
                            </td>
                            <td>
                                @change.was_teacher
                            </td>
                            <td>
                                @change.reason
                            </td>
                            <td>
                                @change.couple
                            </td>
                            <td>
                                @change.cabinet
                            </td>
                            <td>
                                @change.discipline
                            </td>
                            <td>
                                @change.teacher
                            </td>
                        </tr>


                    }
                </tbody>
            </table>

        };
    }

    public void Dispose() => objRef?.Dispose();

}
